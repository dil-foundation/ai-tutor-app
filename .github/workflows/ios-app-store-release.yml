name: iOS App Store Production Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes for App Store'
        required: false
        type: string
        default: 'Bug fixes and performance improvements'
      skip_review:
        description: 'Skip automatic review submission (submit manually)'
        required: false
        default: false
        type: boolean

jobs:
  validate-release:
    name: Validate Release Requirements
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      should_proceed: ${{ steps.validate.outputs.should_proceed }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate release requirements
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Validate version format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format. Use semantic versioning (e.g., 1.0.0)"
            exit 1
          fi
          
          # Check if tag already exists
          if git tag -l | grep -q "^release-$VERSION$"; then
            echo "❌ Release tag release-$VERSION already exists"
            exit 1
          fi
          
          echo "✅ Version validation passed: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should_proceed=true" >> $GITHUB_OUTPUT

  build-and-release:
    name: Build and Release to App Store
    runs-on: macos-latest
    needs: validate-release
    if: needs.validate-release.outputs.should_proceed == 'true'
    
    steps:
      - name: Check for EXPO_TOKEN
        run: |
          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "❌ EXPO_TOKEN secret is required for App Store releases"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Update app version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "Updating app version to $VERSION"
          
          # Update version in app.json
          jq --arg version "$VERSION" '.expo.version = $version' app.json > app.json.tmp
          mv app.json.tmp app.json
          
          # Update version in package.json
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          echo "✅ Version updated to $VERSION"

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add app.json package.json
          git commit -m "chore: bump version to ${{ needs.validate-release.outputs.version }}"

      - name: Create release tag
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          git tag "release-$VERSION"
          git push origin "release-$VERSION"
          echo "✅ Created release tag: release-$VERSION"

      - name: Build iOS app for App Store
        run: |
          echo "Building iOS app for App Store release..."
          eas build --platform ios --profile production --non-interactive --no-wait
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Wait for build completion
        id: build-wait
        run: |
          echo "Waiting for build to complete..."
          BUILD_ID=$(eas build:list --platform=ios --limit=1 --json | jq -r '.[0].id')
          echo "Monitoring build: $BUILD_ID"
          
          timeout 1800 bash -c '
            while true; do
              STATUS=$(eas build:view $BUILD_ID --json | jq -r ".status")
              echo "Build status: $STATUS"
              
              if [ "$STATUS" = "finished" ]; then
                echo "✅ Build completed successfully!"
                BUILD_URL=$(eas build:view $BUILD_ID --json | jq -r ".artifacts.buildUrl")
                echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT
                echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
                break
              elif [ "$STATUS" = "errored" ] || [ "$STATUS" = "canceled" ]; then
                echo "❌ Build failed with status: $STATUS"
                exit 1
              fi
              
              sleep 30
            done
          '
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Submit to App Store
        run: |
          echo "🚀 Submitting build ${{ steps.build-wait.outputs.build_id }} to App Store..."
          eas submit --platform ios --latest --non-interactive
          
          echo "✅ Build submitted to App Store Connect"
          echo "📋 Next steps:"
          echo "   1. Check App Store Connect for the build"
          echo "   2. Complete app metadata if needed"
          echo "   3. Submit for review (manual step required)"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ needs.validate-release.outputs.version }}
          release_name: App Store Release v${{ needs.validate-release.outputs.version }}
          body: |
            # 🚀 App Store Release v${{ needs.validate-release.outputs.version }}
            
            ## Release Information
            - **Version**: ${{ needs.validate-release.outputs.version }}
            - **Build ID**: ${{ steps.build-wait.outputs.build_id }}
            - **Build URL**: ${{ steps.build-wait.outputs.build_url }}
            - **Target**: App Store Production
            - **Status**: Submitted for Review
            
            ## Release Notes
            ${{ github.event.inputs.release_notes }}
            
            ## Next Steps
            1. 📱 Check [App Store Connect](https://appstoreconnect.apple.com) for build status
            2. 📝 Complete any missing app metadata
            3. 🔍 Submit for App Store review
            4. 📊 Monitor review status and respond to feedback
            
            ## Build Details
            This release was automatically built and submitted to the App Store using GitHub Actions.
            The build is now available in App Store Connect and ready for review submission.
            
            ---
            
            **⚠️ Important**: This build has been submitted to App Store Connect but requires manual review submission in App Store Connect to go live on the App Store.
          draft: false
          prerelease: false

      - name: Push version commit
        run: |
          git push origin HEAD:${{ github.ref_name }}

      - name: Notify completion
        run: |
          echo "🎉 App Store release process completed!"
          echo ""
          echo "📊 Release Summary:"
          echo "   Version: ${{ needs.validate-release.outputs.version }}"
          echo "   Build ID: ${{ steps.build-wait.outputs.build_id }}"
          echo "   Status: Submitted to App Store"
          echo ""
          echo "📋 Next Steps:"
          echo "   1. Visit App Store Connect"
          echo "   2. Navigate to your app"
          echo "   3. Go to the 'App Store' tab"
          echo "   4. Select the new build"
          echo "   5. Complete metadata and submit for review"
          echo ""
          echo "🔗 Useful Links:"
          echo "   - App Store Connect: https://appstoreconnect.apple.com"
          echo "   - Build Details: ${{ steps.build-wait.outputs.build_url }}"
          echo "   - GitHub Release: https://github.com/${{ github.repository }}/releases/tag/release-${{ needs.validate-release.outputs.version }}"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-store-release-${{ needs.validate-release.outputs.version }}
          path: |
            app.json
            package.json
          retention-days: 90
