name: iOS TestFlight Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'dil-tutor-app/**'
      - '.github/workflows/ios-testflight-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'dil-tutor-app/**'
      - '.github/workflows/ios-testflight-deploy.yml'
  workflow_dispatch:
    inputs:
      build_profile:
        description: 'Build profile to use'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean
      auto_submit:
        description: 'Automatically submit to TestFlight'
        required: false
        default: false
        type: boolean

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  UXCAM_API_KEY: ${{ secrets.UXCAM_API_KEY }}
  UXCAM_ENABLED: true
  EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
  EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
  EXPO_PUBLIC_API_URL: ${{ secrets.EXPO_PUBLIC_API_URL }}

jobs:
  # Job 1: Code Quality and Testing
  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'dil-tutor-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./dil-tutor-app
        run: npm ci
        
      - name: Run ESLint
        working-directory: ./dil-tutor-app
        run: npm run lint
        
      - name: TypeScript check
        working-directory: ./dil-tutor-app
        run: npx tsc --noEmit
        
      - name: Check for security vulnerabilities
        working-directory: ./dil-tutor-app
        run: npm audit --audit-level=moderate

  # Job 2: iOS Build and TestFlight Deploy
  build-ios:
    name: Build iOS and Deploy to TestFlight
    runs-on: macos-latest
    needs: [quality-check]
    if: always() && (needs.quality-check.result == 'success' || inputs.skip_tests)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'dil-tutor-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./dil-tutor-app
        run: npm ci
        
      - name: Setup Expo CLI
        run: npm install -g @expo/cli@latest
        
      - name: Setup EAS CLI
        run: npm install -g eas-cli@latest
        
      - name: Login to Expo
        run: eas login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          
      - name: Configure build profile
        id: build-config
        run: |
          if [ "${{ inputs.build_profile }}" = "production" ]; then
            echo "profile=production" >> $GITHUB_OUTPUT
            echo "build_type=app-store" >> $GITHUB_OUTPUT
          else
            echo "profile=preview" >> $GITHUB_OUTPUT
            echo "build_type=development" >> $GITHUB_OUTPUT
          fi
          
      - name: Set environment variables
        working-directory: ./dil-tutor-app
        run: |
          echo "UXCAM_API_KEY=${{ secrets.UXCAM_API_KEY }}" >> .env.preview
          echo "UXCAM_ENABLED=true" >> .env.preview
          echo "EXPO_PUBLIC_SUPABASE_URL=${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}" >> .env.preview
          echo "EXPO_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.preview
          echo "EXPO_PUBLIC_API_URL=${{ secrets.EXPO_PUBLIC_API_URL }}" >> .env.preview
          echo "EXPO_PUBLIC_USE_MANAGED_WORKFLOW=false" >> .env.preview
          
      - name: Push environment variables to EAS
        working-directory: ./dil-tutor-app
        run: eas env:push ${{ steps.build-config.outputs.profile }} --path .env.preview
        
      - name: Verify environment variables
        working-directory: ./dil-tutor-app
        run: eas env:list ${{ steps.build-config.outputs.profile }} --format long
        
      - name: Build iOS App
        working-directory: ./dil-tutor-app
        run: eas build -p ios --profile ${{ steps.build-config.outputs.profile }} --non-interactive --wait
        
      - name: Download IPA artifact
        working-directory: ./dil-tutor-app
        run: |
          # Get the latest build ID
          BUILD_ID=$(eas build:list --platform=ios --limit=1 --json | jq -r '.[0].id')
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          
          # Download the IPA
          eas build:download $BUILD_ID --output=./builds/
          
      - name: Upload IPA to GitHub Releases
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-${{ steps.build-config.outputs.build_type }}
          path: dil-tutor-app/builds/*.ipa
          retention-days: 30
          
      - name: Submit to TestFlight (Production Only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.build-config.outputs.profile == 'production' && inputs.auto_submit
        working-directory: ./dil-tutor-app
        run: |
          # Submit to TestFlight
          eas submit -p ios --latest --non-interactive
          
      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.build-config.outputs.profile == 'production'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ios-v${{ github.run_number }}
          name: iOS TestFlight Release v${{ github.run_number }}
          body: |
            ## üçé iOS TestFlight Release
            
            **Build Profile:** ${{ steps.build-config.outputs.profile }}
            **Build Type:** ${{ steps.build-config.outputs.build_type }}
            **UXCam Integration:** ‚úÖ Enabled
            **Build Date:** ${{ github.run_number }}
            
            ### üì± TestFlight Instructions
            1. The app has been automatically submitted to TestFlight
            2. Check your Apple Developer account for the build status
            3. Once approved, distribute to your testers
            4. Test UXCam functionality on iOS devices
            
            ### üîß Technical Details
            - **Expo SDK:** 53.0.22
            - **React Native:** 0.79.5
            - **UXCam SDK:** 6.0.7
            - **iOS Deployment Target:** 13.0
            - **Bundle Identifier:** com.dil.lms
            
            ### üìä UXCam Features
            - Session recording enabled
            - Screen capture for user experience analysis
            - iOS-specific screen recording optimizations
            - Privacy-compliant data collection
            
            ### üöÄ TestFlight Distribution
            - **Auto-submit:** ${{ inputs.auto_submit }}
            - **Build Status:** Check Apple Developer Console
            - **Test Groups:** Configure in TestFlight
          files: dil-tutor-app/builds/*.ipa
          draft: false
          prerelease: false

  # Job 3: TestFlight Status Check
  testflight-status:
    name: Check TestFlight Status
    runs-on: ubuntu-latest
    needs: [build-ios]
    if: always() && inputs.auto_submit && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup EAS CLI
        run: npm install -g eas-cli@latest
        
      - name: Login to Expo
        run: eas login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          
      - name: Check TestFlight submission status
        working-directory: ./dil-tutor-app
        run: |
          echo "üîç Checking TestFlight submission status..."
          eas submit:list -p ios --limit=1
          
      - name: Notify TestFlight Status
        run: |
          if [ "${{ needs.build-ios.result }}" = "success" ]; then
            echo "‚úÖ iOS build completed and submitted to TestFlight!"
            echo "üì± Check Apple Developer Console for processing status"
            echo "‚è±Ô∏è Processing usually takes 10-30 minutes"
          else
            echo "‚ùå iOS build or TestFlight submission failed!"
            echo "Please check the build logs for details."
          fi

  # Job 4: Build Status Notification
  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-ios]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.build-ios.result == 'success'
        run: |
          echo "‚úÖ iOS TestFlight build completed successfully!"
          echo "Build Profile: ${{ inputs.build_profile }}"
          echo "Build Type: ${{ steps.build-config.outputs.build_type }}"
          echo "Auto-submit to TestFlight: ${{ inputs.auto_submit }}"
          
      - name: Notify Failure
        if: needs.build-ios.result == 'failure'
        run: |
          echo "‚ùå iOS TestFlight build failed!"
          echo "Please check the build logs for details."
          exit 1
