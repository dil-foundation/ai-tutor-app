name: Android Build and Deploy

on:
  workflow_dispatch:
    inputs:
      release_channel:
        description: 'Release channel'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

jobs:
  build-and-deploy:
    name: Build and Deploy Android App
    runs-on: ubuntu-latest
    
    steps:
      - name: Check for EXPO_TOKEN
        run: |
          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "❌ You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets."
            echo "Learn more: https://docs.expo.dev/eas-update/github-actions"
            exit 1
          fi


      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # cache: 'npm'  # Disabled due to GitHub cache service issues

      - name: Install EAS CLI manually
        run: |
          echo "Installing EAS CLI without caching..."
          npm install -g eas-cli@latest
          eas --version
        env:
          # Disable all caching mechanisms
          npm_config_cache: /tmp/npm-cache
          npm_config_prefer_offline: false
          npm_config_audit: false
          npm_config_fund: false

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm install --no-optional --no-audit --no-fund
        env:
          # Disable all caching mechanisms
          npm_config_cache: /tmp/npm-cache
          npm_config_prefer_offline: false
          npm_config_audit: false
          npm_config_fund: false

      - name: Check EAS configuration
        run: |
          echo "🔍 Checking EAS configuration..."
          if [ -f "eas.json" ]; then
            echo "✅ eas.json found"
            cat eas.json
          else
            echo "❌ eas.json not found - this may cause build issues"
          fi
          
          echo "🔍 Checking for Android-specific configurations..."
          if [ -f "android/app/build.gradle" ]; then
            echo "✅ Android build.gradle found"
          else
            echo "⚠️ Android build.gradle not found in expected location"
          fi

      - name: Build Android app with retry
        run: |
          echo "🚀 Building Android app with profile: ${{ github.event.inputs.release_channel }}"
          
          # Function to attempt build with retry
          build_with_retry() {
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "🔄 Build attempt $attempt of $max_attempts"
              
              if eas build --platform android --profile ${{ github.event.inputs.release_channel }} --non-interactive --wait; then
                echo "✅ Build successful on attempt $attempt"
                return 0
              else
                echo "❌ Build failed on attempt $attempt"
                if [ $attempt -lt $max_attempts ]; then
                  echo "⏳ Waiting 30 seconds before retry..."
                  sleep 30
                fi
                attempt=$((attempt + 1))
              fi
            done
            
            echo "❌ All build attempts failed"
            return 1
          }
          
          # Try building with retry
          if ! build_with_retry; then
            echo "🔄 Trying alternative build approach..."
            echo "📱 Attempting build with --clear-cache flag..."
            eas build --platform android --profile ${{ github.event.inputs.release_channel }} --non-interactive --wait --clear-cache
          fi
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
          EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}


      - name: Download APK
        run: |
          echo "📱 Downloading APK..."
          
          # Function to download APK with retry
          download_apk_with_retry() {
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "🔄 Download attempt $attempt of $max_attempts"
              
              if eas build:list --platform android --limit 1 --json > build_info.json; then
                BUILD_URL=$(cat build_info.json | jq -r '.[0].artifacts.buildUrl')
                echo "📦 Build URL: $BUILD_URL"
                
                if curl -L -o dil-tutor-app.apk "$BUILD_URL"; then
                  echo "✅ APK downloaded successfully: dil-tutor-app.apk"
                  return 0
                else
                  echo "❌ APK download failed on attempt $attempt"
                fi
              else
                echo "❌ Failed to get build info on attempt $attempt"
              fi
              
              if [ $attempt -lt $max_attempts ]; then
                echo "⏳ Waiting 15 seconds before retry..."
                sleep 15
              fi
              attempt=$((attempt + 1))
            done
            
            echo "❌ All download attempts failed"
            return 1
          }
          
          download_apk_with_retry
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: dil-tutor-app-${{ github.event.inputs.release_channel }}-${{ github.run_number }}
          path: dil-tutor-app.apk
          retention-days: 30

      - name: Notify completion
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Build completed successfully!"
            echo "📱 APK artifact uploaded for distribution"
            echo "📦 Download from GitHub Actions artifacts"
            echo "📁 File: dil-tutor-app.apk"
          else
            echo "❌ Build failed"
            echo "Please check the logs above for details"
          fi

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    
    steps:
      - name: Build Success Notification
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "🎉 Android build successful!"
          echo "📱 Channel: ${{ github.event.inputs.release_channel }}"
          echo "⏰ Completed at: $(date)"

      - name: Build Failure Notification
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Android build failed!"
          echo "📱 Channel: ${{ github.event.inputs.release_channel }}"
          echo "⏰ Failed at: $(date)"
          echo "Please check the build logs for details"
