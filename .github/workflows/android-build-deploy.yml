name: Android Build and Deploy

on:
  workflow_dispatch:
    inputs:
      release_channel:
        description: 'Release channel'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview
          - development

jobs:
  build-and-deploy:
    name: Build and Deploy Android App
    runs-on: ubuntu-latest
    
    steps:
      - name: Check for EXPO_TOKEN
        run: |
          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "‚ùå You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets."
            echo "Learn more: https://docs.expo.dev/eas-update/github-actions"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Verify project configuration
        run: |
          echo "üîç Verifying Expo configuration..."
          npx expo config --type public

      - name: Build Android APK
        id: build-step
        run: |
          echo "üöÄ Building Android APK with profile: ${{ github.event.inputs.release_channel }}"
          
          # Start the build and capture the build ID
          BUILD_OUTPUT=$(eas build --platform android --profile ${{ github.event.inputs.release_channel }} --non-interactive --no-wait --json)
          BUILD_ID=$(echo "$BUILD_OUTPUT" | jq -r '.id')
          
          echo "üì± Build ID: $BUILD_ID"
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          
          # Wait for build completion with timeout
          echo "‚è≥ Waiting for build to complete..."
          timeout 1800 bash -c '
            while true; do
              STATUS=$(eas build:view $BUILD_ID --json | jq -r ".status")
              echo "üìä Build status: $STATUS"
              
              if [ "$STATUS" = "finished" ]; then
                echo "‚úÖ Build completed successfully!"
                BUILD_URL=$(eas build:view $BUILD_ID --json | jq -r ".artifacts.buildUrl")
                echo "üîó Build URL: $BUILD_URL"
                echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT
                break
              elif [ "$STATUS" = "errored" ] || [ "$STATUS" = "canceled" ]; then
                echo "‚ùå Build failed with status: $STATUS"
                exit 1
              fi
              
              sleep 30
            done
          '
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
          EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Download APK
        run: |
          echo "üì± Downloading APK..."
          BUILD_URL="${{ steps.build-step.outputs.build_url }}"
          
          # Download with retry mechanism
          for attempt in 1 2 3; do
            echo "üîÑ Download attempt $attempt of 3"
            if curl -L -o "dil-tutor-app-${{ github.event.inputs.release_channel }}.apk" "$BUILD_URL"; then
              echo "‚úÖ APK downloaded successfully!"
              echo "üìÅ File: dil-tutor-app-${{ github.event.inputs.release_channel }}.apk"
              break
            else
              echo "‚ùå Download failed on attempt $attempt"
              if [ $attempt -lt 3 ]; then
                echo "‚è≥ Waiting 10 seconds before retry..."
                sleep 10
              else
                echo "‚ùå All download attempts failed"
                exit 1
              fi
            fi
          done

      - name: Upload APK as GitHub artifact
        uses: actions/upload-artifact@v4
        with:
          name: dil-tutor-app-${{ github.event.inputs.release_channel }}-${{ github.run_number }}
          path: dil-tutor-app-${{ github.event.inputs.release_channel }}.apk
          retention-days: 30

      - name: Notify build completion
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Android APK build completed successfully!"
            echo "üì± Build ID: ${{ steps.build-step.outputs.build_id }}"
            echo "üîó Build URL: ${{ steps.build-step.outputs.build_url }}"
            echo "üì¶ Profile: ${{ github.event.inputs.release_channel }}"
            echo "üìÅ APK File: dil-tutor-app-${{ github.event.inputs.release_channel }}.apk"
            echo ""
            echo "üìã Next Steps:"
            echo "   1. Download APK from GitHub Actions artifacts"
            echo "   2. Install directly on Android devices"
            echo "   3. Distribute to testers or users"
          else
            echo "‚ùå Android APK build failed"
            echo "Please check the logs above for details"
          fi

      - name: Upload build info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-info-${{ github.run_number }}
          path: |
            package.json
            app.json
            eas.json
          retention-days: 30