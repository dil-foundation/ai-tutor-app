name: Android APK Build and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'dil-tutor-app/**'
      - '.github/workflows/android-build-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'dil-tutor-app/**'
      - '.github/workflows/android-build-deploy.yml'
  workflow_dispatch:
    inputs:
      build_profile:
        description: 'Build profile to use'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  UXCAM_API_KEY: ${{ secrets.UXCAM_API_KEY }}
  UXCAM_ENABLED: true
  EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}
  EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}
  EXPO_PUBLIC_API_URL: ${{ secrets.EXPO_PUBLIC_API_URL }}

jobs:
  # Job 1: Code Quality and Testing
  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'dil-tutor-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./dil-tutor-app
        run: npm ci
        
      - name: Run ESLint
        working-directory: ./dil-tutor-app
        run: npm run lint
        
      - name: TypeScript check
        working-directory: ./dil-tutor-app
        run: npx tsc --noEmit
        
      - name: Check for security vulnerabilities
        working-directory: ./dil-tutor-app
        run: npm audit --audit-level=moderate

  # Job 2: Android APK Build
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: [quality-check]
    if: always() && (needs.quality-check.result == 'success' || inputs.skip_tests)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'dil-tutor-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./dil-tutor-app
        run: npm ci
        
      - name: Setup Expo CLI
        run: npm install -g @expo/cli@latest
        
      - name: Setup EAS CLI
        run: npm install -g eas-cli@latest
        
      - name: Login to Expo
        run: eas login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          
      - name: Configure build profile
        id: build-config
        run: |
          if [ "${{ inputs.build_profile }}" = "production" ]; then
            echo "profile=production" >> $GITHUB_OUTPUT
            echo "build_type=app-bundle" >> $GITHUB_OUTPUT
          else
            echo "profile=preview" >> $GITHUB_OUTPUT
            echo "build_type=apk" >> $GITHUB_OUTPUT
          fi
          
      - name: Set environment variables
        working-directory: ./dil-tutor-app
        run: |
          echo "UXCAM_API_KEY=${{ secrets.UXCAM_API_KEY }}" >> .env.preview
          echo "UXCAM_ENABLED=true" >> .env.preview
          echo "EXPO_PUBLIC_SUPABASE_URL=${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}" >> .env.preview
          echo "EXPO_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.EXPO_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.preview
          echo "EXPO_PUBLIC_API_URL=${{ secrets.EXPO_PUBLIC_API_URL }}" >> .env.preview
          echo "EXPO_PUBLIC_USE_MANAGED_WORKFLOW=false" >> .env.preview
          
      - name: Push environment variables to EAS
        working-directory: ./dil-tutor-app
        run: eas env:push ${{ steps.build-config.outputs.profile }} --path .env.preview
        
      - name: Verify environment variables
        working-directory: ./dil-tutor-app
        run: eas env:list ${{ steps.build-config.outputs.profile }} --format long
        
      - name: Build Android APK
        working-directory: ./dil-tutor-app
        run: eas build -p android --profile ${{ steps.build-config.outputs.profile }} --non-interactive --wait
        
      - name: Download APK artifact
        working-directory: ./dil-tutor-app
        run: |
          # Get the latest build ID
          BUILD_ID=$(eas build:list --platform=android --limit=1 --json | jq -r '.[0].id')
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          
          # Download the APK
          eas build:download $BUILD_ID --output=./builds/
          
      - name: Upload APK to GitHub Releases
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ steps.build-config.outputs.build_type }}
          path: dil-tutor-app/builds/*.apk
          retention-days: 30
          
      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.build-config.outputs.profile == 'production'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: android-v${{ github.run_number }}
          name: Android APK Release v${{ github.run_number }}
          body: |
            ## üöÄ Android APK Release
            
            **Build Profile:** ${{ steps.build-config.outputs.profile }}
            **Build Type:** ${{ steps.build-config.outputs.build_type }}
            **UXCam Integration:** ‚úÖ Enabled
            **Build Date:** ${{ github.run_number }}
            
            ### üì± Installation Instructions
            1. Download the APK file
            2. Enable "Install from unknown sources" on your Android device
            3. Install the APK
            4. Open the app and test UXCam functionality
            
            ### üîß Technical Details
            - **Expo SDK:** 53.0.22
            - **React Native:** 0.79.5
            - **UXCam SDK:** 6.0.7
            - **Target SDK:** 34
            - **Min SDK:** 21
            
            ### üìä UXCam Features
            - Session recording enabled
            - Screen capture for user experience analysis
            - Privacy-compliant data collection
          files: dil-tutor-app/builds/*.apk
          draft: false
          prerelease: false

  # Job 3: Build Status Notification
  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-android]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.build-android.result == 'success'
        run: |
          echo "‚úÖ Android APK build completed successfully!"
          echo "Build Profile: ${{ inputs.build_profile }}"
          echo "Build Type: ${{ steps.build-config.outputs.build_type }}"
          
      - name: Notify Failure
        if: needs.build-android.result == 'failure'
        run: |
          echo "‚ùå Android APK build failed!"
          echo "Please check the build logs for details."
          exit 1
